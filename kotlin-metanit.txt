https://metanit.com/kotlin/tutorial/1.1.php

Kotlin представляет современный, статически типизированный и один из самых быстроразвивающихся языков программирования, созданный и развиваемый компанией JetBrains. Kotlin можно использовать для создания самых разных приложений. Это и приложения для мобильных устройств - Android, iOS. Причем Kotlin позволяет писать кроссплатформенный код, который будет применяться на всех платформах. Это и веб-приложения, причем как серверные приложения, которые отрабатывают на стороне на стороне сервера - бекэнда, так и браузерные клиентские приложения - фронтенд. Kotlin также можно применять для создания десктопных приложений, для Data Science и так далее.

Официальный сайт языка - https://kotlinlang.org/, где можно найти самую последнюю и самую подробную информацию по языку.


Загрузить компилятор непосредственно для самого языка Kotlin можно по адресу https://github.com/JetBrains/kotlin/releases/latest/. В самом низу страницы мы можем найти общую версию компилятора, версии компилятора Kotlin/Native для разных операционных систем, а также исходный код. Загрузим файл kotlin-compiler-1.5.0.zip:

c:\app\kotlinc\bin\kotlinc app.kt -include-runtime -d app.jar

Чтобы не писать полный путь к компилятору, путь к нему можно добавить в переменную PATH в переменных среды

C:\app\Java\jdk-11.0.11\bin\java.exe "-javaagent:C:\app\JetBrains\IntelliJ IDEA 2021.1.1\lib\idea_rt.jar=58479:C:\app\JetBrains\IntelliJ IDEA 2021.1.1\bin" -Dfile.encoding=UTF-8 -classpath C:\src\learn-kotlin-metanit\HelloKotlin\out\production\HelloKotlin;C:\Users\VKovrov\AppData\Roaming\JetBrains\IntelliJIdea2021.2\plugins\Kotlin\kotlinc\lib\kotlin-stdlib.jar;C:\Users\VKovrov\AppData\Roaming\JetBrains\IntelliJIdea2021.2\plugins\Kotlin\kotlinc\lib\kotlin-reflect.jar;C:\Users\VKovrov\AppData\Roaming\JetBrains\IntelliJIdea2021.2\plugins\Kotlin\kotlinc\lib\kotlin-test.jar AppKt
Привет, Kotlin!


Стоит отметить, что в отличие от других похожих языков программирования, например, Java, в Kotlin не обязательно ставить после инструкции точку запятой. Каждая инструкция просто размещается на новой строке:


Для определения переменной можно использовать либо ключевое слово val, либо ключевое слово var.

Формальное определение переменной:


val|var имя_переменной: тип_переменной
Вначале идет слово val или var, затем имя переменной и через двоеточие тип переменной.

Например, определим переменную age:

val age: Int

С помощью ключевого слова val определяется неизменяемая переменная (immutable variable). То есть мы можем присвоить значение такой переменной только один раз, но изменить его после первого присвоения мы уже не сможем. Например, в следующем случае мы получим ошибку:



Целочисленные типы
Byte: хранит целое число от -128 до 127 и занимает 1 байт

Short: хранит целое число от -32 768 до 32 767 и занимает 2 байта

Int: хранит целое число от -2 147 483 648 (-231) до 2 147 483 647 (231 - 1) и занимает 4 байта

Long: хранит целое число от –9 223 372 036 854 775 808 (-263) до 9 223 372 036 854 775 807 (263-1) и занимает 8 байт

В последней версии Kotlin также добавлена поддержка для целочисленных типов без знака:

UByte: хранит целое число от 0 до 255 и занимает 1 байт

UShort: хранит целое число от 0 до 65 535 и занимает 2 байта

UInt: хранит целое число от 0 до 232 - 1 и занимает 4 байта

ULong: хранит целое число от 0 до 264-1 и занимает 8 байт






Float: хранит число с плавающей точкой от -3.4*1038 до 3.4*1038 и занимает 4 байта

Double: хранит число с плавающей точкой от ±5.0*10-324 до ±1.7*10308 и занимает 8 байта.




\t: табуляция
\n: перевод строки
\r: возврат каретки
\': одинарная кавычка
\": двойная кавычка
\\: обратный слеш


Строки представлены типом String. Строка представляет последовательность символов, заключенную в двойные кавычки, либо в тройные двойные кавычки.




Шаблоны строк
Шаблоны строк (string templates) представляют удобный способ вставки в строку различных значений, в частности, значений переменных. Так, с помощью знака доллара $ мы можем вводить в строку значения различных переменных:



Конструкция when
Конструкция when проверяет значение некоторого объекта и в зависимости от его значения выполняет тот или иной код. Конструкция when аналогична конструкции switch в других языках. Формальное определение:

when(объект){
     
    значение1 -> действия1
    значение2 -> действия2
     
    значениеN -> действияN
}

